// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userhandler

import (
	"context"

	proto "catering/proto/user"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddressTag          = proto.AddressTag
	GetUserAddressReq   = proto.GetUserAddressReq
	GetUserAddressResp  = proto.GetUserAddressResp
	LoginReq            = proto.LoginReq
	LoginResp           = proto.LoginResp
	RegisterReq         = proto.RegisterReq
	RegisterResp        = proto.RegisterResp
	UserAddress         = proto.UserAddress
	UserInfo            = proto.UserInfo
	UserInfoReq         = proto.UserInfoReq
	UserInfoResp        = proto.UserInfoResp
	UserIntegration     = proto.UserIntegration
	UserIntegrationLogs = proto.UserIntegrationLogs

	UserHandler interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		GetUserAddress(ctx context.Context, in *GetUserAddressReq, opts ...grpc.CallOption) (*GetUserAddressResp, error)
	}

	defaultUserHandler struct {
		cli zrpc.Client
	}
)

func NewUserHandler(cli zrpc.Client) UserHandler {
	return &defaultUserHandler{
		cli: cli,
	}
}

func (m *defaultUserHandler) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := proto.NewUserHandlerClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserHandler) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := proto.NewUserHandlerClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserHandler) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := proto.NewUserHandlerClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUserHandler) GetUserAddress(ctx context.Context, in *GetUserAddressReq, opts ...grpc.CallOption) (*GetUserAddressResp, error) {
	client := proto.NewUserHandlerClient(m.cli.Conn())
	return client.GetUserAddress(ctx, in, opts...)
}
